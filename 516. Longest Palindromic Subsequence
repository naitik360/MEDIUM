class Solution {
public:
    int find(string s,string k)
    {
        int n=s.size(),ans=0;
        int dp[n+1][n+1],r=n,c=n;
        
        for(int i=0;i<=r;i++)
            dp[i][0]=0;
        
        for(int i=0;i<=c;i++)
            dp[0][i]=0;
        
        for(int i=1;i<=r;i++)
        {
            for(int j=1;j<=c;j++)
            {
                if(s[i-1]==k[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                   dp[i][j] = max(dp[i-1][j],dp[i][j-1]);     
                
                ans=max(ans,dp[i][j]);
            }
        }
      return ans; 
    }
    int longestPalindromeSubseq(string s) {
        string k=s;
        reverse(k.begin(),k.end());
        return find(s,k);
    }
};
